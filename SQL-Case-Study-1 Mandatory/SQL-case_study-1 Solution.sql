Create Database case_study1

use case_study1


Select * from Fact
Select * from location
Select * from product

--1. Display the number of states present in the LocationTable. 

Select count(state) as number_of_states from location 


--2. How many products are of regular type?

Select count(Product) as Count_of_product from product
where Type = 'Regular'

--3. How much spending has been done on marketing of product ID 1?

Select sum(MARKETING) as MARKETING FROM FACT 
WHERE ProductId=1

--4. What is the minimum sales of a product?

Select min(sales) as Minimus_sales from Fact

--5. Display the max Cost of Good Sold (COGS). 

Select max(cogs) as Maximum_COGS from Fact

--6. Display the details of the product where product type is coffee. 

Select * from Product
where Product_type = 'coffee'

--7. Display the details where total expenses are greater than 40. 

Select * from fact
where Total_Expenses > 40

--8. What is the average sales in area code 719?

Select Avg(sales) As AVG_Sales from fact 
where Area_Code = 719

--9. Find out the total profit generated by Colorado state.

Select Sum(Profit) as Total_profit from Fact as f
inner join Location as l on
f.Area_code = l.Area_code
Where state = 'Colorado'

--10. Display the average inventory for each product ID.

Select Productid,Avg(Inventory) as Avg_inventory from fact 
Group by Productid

--11. Display state in a sequential order in a Location Table.

Select * from Location 
Order by State desc

--12. Display the average budget of the Product where the average budget margin should be greater than 100.

Select Productid, Avg(Budget_Margin) as Avg From Fact
Group by Productid
Having Avg(Budget_Margin)>100

--13. What is the total sales done on date 2010-01-01?

Select Sum(sales) as Total_sales from fact 
where Date = '2010-01-01'

--14. Display the average total expense of each product ID on an individual date.

Select ProductId,Date, Avg(Total_Expenses)as Avg_Total_Expenses  from fact
Group by ProductId, Date
Order by ProductId

--15. Display the table with the following attributes such as 
--date, productID,product_type, product, sales, profit, state, area_code.

Select date, f.productid, product_type, product, sales, profit, state, f.area_code
from Fact as f
inner Join Product as p on
f.ProductId = p.ProductId
Inner Join Location as l on
f.Area_code = l.Area_code


--16. Display the rank without any gap to show the sales wise rank.

SELECT Productid, sales,Dense_rank() OVER (ORDER BY sales DESC) as ROW_NUMBER FROM Fact

--17. Find the state wise profit and sales.

Select Sales ,Profit, State from fact as f
Inner Join Location as l on
f.Area_code = l.Area_code


--18. Find the state wise profit and sales along with the product name.

Select product,Sales ,Profit, State 
From fact as f
inner Join Product as p on
f.ProductId = p.ProductId
Inner Join Location as l on
f.Area_code = l.Area_code

--19. If there is an increase in sales of 5%, calculate the increasedsales.

Select sales + sales*0.05 From Fact;

--20. Find the maximum profit along with the product ID and producttype.

Select top 1 Profit as Max_Profit, f.Productid, p.Product_type from Fact as f
inner Join Product as p on
f.ProductId = p.ProductId
order by Profit desc

--21. Create a stored procedure to fetch the result according to the product type from Product Table.

Create Procedure Fetch_Result(@Product_Type Varchar(100))
As 
   Begin
       Select * from Product
	   where Product_Type = @Product_Type
End

Exec Fetch_Result 'coffee'

--22. Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss.

Select *,
Case When Total_Expenses < 60 then	'Profit'
Else 'Loss'
End as Profit_Loss
from Fact 

--23. Give the total weekly sales value with the date and product ID details.
--Use roll-up to pull the data in hierarchical order.

SELECT Date, ProductId, SUM(Sales) AS TotalSales,
       DATEPART(year, Date) *100 + DATEPART(iso_week, Date) AS WeekNumber
FROM fact
GROUP BY Date,ROLLUP(DATEPART(year, Date) *100 + DATEPART(iso_week, Date) , ProductId)
ORDER BY WeekNumber , ProductId

                          -----OR------
SELECT Date, ProductId, SUM(Sales) AS TotalSales, ---ownnnn
DATEPART(year, Date) as YearNo , DATEPART(iso_week, Date) AS WeekNumber
FROM fact
GROUP BY Date,ROLLUP(DATEPART(year, Date), DATEPART(iso_week, Date) , ProductId)
ORDER BY WeekNumber desc , ProductId

--24. Apply union and intersection operator on the tables which consist of attribute area code.

Select area_code FROM Fact
UNION
Select area_code FROM Location;

--25. Create a user-defined function for the product table to fetch 
--a particular product type based upon the user’s preference.

CREATE FUNCTION Get_Products_By_Type(@ProductType VARCHAR(100))
RETURNS TABLE
AS
RETURN
(  SELECT *FROM Product
    WHERE Product_Type = @ProductType
 )
Go

Select  * from Get_Products_By_Type ('tea')

--26. Change the product type from coffee to tea where product ID is 1 and undo it.

UPDATE Product
SET Product_Type = 'tea'
WHERE ProductID = 1


--Undo
UPDATE Product
SET Product_Type = 'coffee'
WHERE ProductID = 1

--27. Display the date, product ID and sales where total expenses are between 100 to 200.

Select Date, ProductID,Sales from fact
WHERE Total_Expenses BETWEEN 100 AND 200

--28. Delete the records in the Product Table for regular type.

DELETE FROM Product
WHERE ProductType = 'regular'

--29. Display the ASCII value of the fifth character from the columnProduct.

Select ASCII(SUBSTRING(Product, 5, 1)) AS Fifth_Character_Ascii
FROM Product;


